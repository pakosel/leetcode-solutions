using System.Text;
using NUnit.Framework;
using NUnit.Framework.Legacy;
using System.Linq;
using System.Collections.Generic;
using Common;

namespace MaxDotProductOfTwoSubsequences
{
    [TestFixture]
    public class SolutionTest
    {
        private static readonly object[] testCasesStr =
        {
            new object[] {"[2,1,-2,5]", "[3,0,-6]", 18},
            new object[] {"[3,-2]", "[2,-6,7]", 21},
            new object[] {"[-1,-1]", "[1,1]", -1},
            new object[] {"[-5,-1,-2]", "[3,3,5,5]", -3},
            new object[] {"[-22,53,92,9,-34,-10,-7,75,-60,-76,1,96,53,-35,-58,0,57,-38,28,-73,-66,59,-86,14,83,72,-11,-83,38,33,-40,-81,-46,47,-44,61,74,98,59,66,-60,-13,-50,76,-89,92,35,-1,84,67,-64,99,-67,-29,55,98,100,-28,-80,45,99,-27,-65,71,-12,-55,21,8,-70,39,-44,64,-34,43,0,26,49,43,-93,-16,-71,42,-98,-10,73,-57,32,80,68,27,19,85,-65,20,5,-31,15,60,48,28,6,70,-67,25,-10,68,34,46,-26,57,-100,-6,78,65,-67,-20,-66,92,-29,-36,27,67,15,67,54,99,-23,51,95,23,82,26,68,-4,-63,-95,-3,56,92,-3,59,73,91,-16,34,78,-85,100,-79,2,-45,-68,18,-100,59,72,65,95,-33,-60,29,-56,-95,95,10,-76,-28,16,-37,48,71,27,98,78,-44,-84,16,-61,86,66,-55,42,-54,-59,97,-7,-25,-30,-92,-66,-19,42,98,45,-48,-19,-100,80,18,91,-11,96,36,-45,24,-9,-63,-22,-66,-87,-48,-73,5,0,37,-48,-46,68,-46,12,1,-58,36,-30,-47,42,-91,-93,-73,-81,-3,0,-73,-87,45,-57,45,78,-26,-96,12,19,85,63,-35,-4,-41,24,-32,-15,3,-34,94,-40,81,78,-21,58,-77,-63,-81,-47,-17,-97,-28,89,66,-10,75,-82,-76,70,17,-14,-100,-31,49,-51,-1,37,52,99,-62,-48,-11,100,44,83,14,-30,20,-16,-17,-59,-4,-65,-96,-20,60,-33,-14,-89,-36,25,-13,-13,-98,-40,33,-71,-13,3,-66,-78,44,-14,-22,-29,98,55,28,44,-72,25,8,24,6,97,54,3,-76,87,-54,52,96,5,60,30,-91,-59,-93,-70,-12,-35,99,38,86,70,-67,21,-12,14,12,-43,82,1,-77,95,66,25,95,78,-89,79,3,-98,-62,-44,18,-64,81,-75,-29,-28,82,-73,10,2,88,61,9,-12,12,64,24,-78,-20,-94,100,-32,5,36,-62,64,-67,-28,-12,-53,-32,26,68,38,59,-66,77,-38,26,-45,-45,14,-1,-41,-52,34,77,-77,75,-71,-56,50,-43,3,-62,6,33,-26,-58,-92,40,-35,94,41,-74,34,38,50,-72,76,58,-39,97,-36,-55,-59,19,45,-25,45,-76,-8,89,-100,-98,-74,17,-49,89,-3,85,93,-55,-3,64,37,-87,76,-39,64,50,58,-19,-41,-96,-9,77,-71,79,-78,-64,-26,-99,88,-39,-3,-17,3,-35,82,-47,47,-69,38,50,43,33,57,-40,-65,56,-42]", "[42,-27,-62,-76,65,-40,-94,85,74,8,-58,-79,15,-50,60,-32,62,84,63,36,-46,48,-17,-84,21,-30,22,100,-25,-16,-10,-4,71,97,53,-52,1,25,90,-73,43,6,76,-71,3,43,28,72,91,79,93,-48,-44,-77,82,22,27,23,81,-52,-86,86,24,-17,-16,-84,-27,88,-65,55,-20,-96,61,-52,-50,-78,-48,-64,-17,-79,49,-63,-24,-13,5,-13,-20,-61,-35,8,-90,-21,4,-35,-12,-26,89,-44,-59,-50,44,-30,-10,-74,7,20,-19,6,-25,86,41,-44,-24,-5,50,-62,65,-72,6,-36,60,-85,-49,52,-29,-41,-71,-90,-93,23,-49,13,19,-33,34,49,-47,82,-30,42,35,82,-89,-39,-78,-41,68,95,10,-34,94,30,-35,-37,57,-36,-14,-74,0,-47,49,-6,-73,23,-85,-81,-18,-94,-88,0,70,-98,-24,92,-59,51,93,-58,-30,20,-32,-73,96,24,-10,72,-18,100,-25,48,-1,73,46,54,-10,-94,32,-72,-48,75,-72,9,61,6,55,61,89,-66,-66,14,93,51,-28,-56,-59,-10,40,-43,70,-99,29,-89,-74,-10,18,53,-78,8,-96,-43,11,-58,-88,68,94,82,78,3,16,-68,-27,-74,12,-45,24,-49,-37,90,-93,-18,-100,-77,-49,35,-61,-54,-29,14,-80,-10,82,58,-63,76,-24,-24,5,-92,-26,11,-95,69,98,92,-56,-72,23,36,67,-50,-16,54,-25,46,-93,14,83,7,-64,4,59,-16,2,-93,-35,-57,-39,66,-99,-95,-68,14,50,44,41,-48,-24,93,-85,-91,-82,-79,-19,-78,-19,7,76,36,4,26,80,40,-14,-84,-9,76,-21,-29,9,-23,-80,-28,18,36,77,-99,-24,-41,-37,-85,-92,86,-83,43,-84,-66,6,-93,58,-56,-9,12,-38,73,23,-69,80,-96,-66,35,95,-53,-69,-87,-42,63,71,-2,-48,-20,-9,-35,-96,48,57,-71,-5,23,70,-80,-71,-8,-92,11,-42,70,19,-9,-51,7,47,18,-76,-75,54,59,89,100,32,-16,84,40,16,8,38,-70,-38,-8,-55,-29,10,23,50,85,-97,-22,-65,-64,-47,-5,11,-39,-99,-97,1,-24,96,59,58,6,17,-10,-75,-6,54,-47,62,-98,-5,-49,22,56,91,93,-73,72,-34,-14,-89,30,-78,34,53,25,-53,73,3,-45,54,-78,-95,78,-50,25,90,10,-49,-90,77,-63,-29,-19,69,-69,-62,66,-23,-10,-9,-52,54,-39,8,47,20,-50,-53,-93,4,32,-13,15,-61,-19,33,83,43,24,58,51]", 1358393},
        };

        [Test]
        [TestCaseSource("testCasesStr")]
        public void Test_Generic(string nums1Str, string nums2Str, int expected)
        {
            var nums1 = ArrayHelper.ArrayFromString<int>(nums1Str);
            var nums2 = ArrayHelper.ArrayFromString<int>(nums2Str);

            var sol = new Solution();
            var res = sol.MaxDotProduct(nums1, nums2);

            ClassicAssert.AreEqual(expected, res);
        }
    }
}