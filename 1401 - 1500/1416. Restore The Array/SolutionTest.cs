using System.Text;
using NUnit.Framework;
using System.Linq;
using System.Collections.Generic;
using Common;

namespace RestoreTheArray
{
    [TestFixture]
    public class SolutionTest
    {
        private static readonly object[] testCasesStr =
        {
            new object[] {"1000", 10000, 1},
            new object[] {"1000", 10, 0},
            new object[] {"1317", 2000, 8},
            new object[] {"1317", 20, 4},
            new object[] {"123456789123456", 10000, 10671},
            new object[] {},
        };

        [Test]
        [TestCaseSource("testCasesStr")]
        public void Test_Generic(string s, int k, int expected)
        {
            var sol = new Solution();
            var res = sol.NumberOfArrays(s, k);

            Assert.That(expected == res);
        }
    }
}