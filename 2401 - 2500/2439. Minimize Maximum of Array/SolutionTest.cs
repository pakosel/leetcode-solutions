using System.Text;
using NUnit.Framework;
using NUnit.Framework.Legacy;
using System.Linq;
using System.Collections.Generic;
using Common;

namespace MinimizeMaximumOfArray
{
    [TestFixture]
    public class SolutionTest
    {
        private static readonly object[] testCasesStr =
        {
            new object[] {"[3,7,1,6]", 5},
            new object[] {"[10,1]", 10},
            new object[] {"[0,0]", 0},
            new object[] {"[9,8,7,6]", 9},
            new object[] {"[1,2,3]", 2},
            new object[] {"[676,827,718]", 752},
            new object[] {"[676,827,718,647,593,115,841]", 752},
            new object[] {"[676,827,718,647,593,115,841,330,505,117,970,635,588,397,850,150,140,269,785,164,928,636,220,775,995,592,240,571,206,277]", 752},
            new object[] {"[676,827,718,647,593,115,841,330,505,117,970,635,588,397,850,150,140,269,785,164,928,636,220,775,995,592,240,571,206,277,626,187,316,682,633,647,810,177,145,404,184,734,515,331,384,207,193,453,815,66,760,641,179,304,320,756,211,708,152,829,272,451,149,570,750,86,996,350,368,895,426,867,947,559,451,385,545,659,124,459,905,949,445,181,839,462,483,9,586,874,345,507,144,475,97,501,97,397,156,848,111,538,876,242,728,85,731,351,763,753,470,214,884,676,425,342,186,693,535,809,920,747,620,30,910,690,604,570,450,632,697,81,448,359,705,263,349,355,22,197,194,675,661,576,134,981,995,584,27,845,456,507,854,68,840,446,553,522,953,910,124,510,156,877,320,742,974,114,701,741,267,661,471,861,792,227,331,750,334,323,505,679,109,494,709,49,431,668,539,14,104,764,475,598,545,540,567,827,287,361,580,61,186,917,517,763,170,286,93,180,668,48,536,543,62,618,778,8,402,680,44,554,995,104,882,820,89,25,409,469,52,926,652,558,390,641,733,362,496,713,516,529,996,696,431,393,639,919,205,215,219,990,535,999,680,669,133,710,95,394,327,135,759,551,847,348,5,346,22,273,993,976,301,470,495,960,903,59,642,795,54,572,995,383,410,779,843,63,436,635,607,855,387,83,108,408,151,686,450,603,251,848,920,950,385,425,259,352,703,341,500,840,63,566,824,7,715,184,46,562,915,27,162,638,396,202,382,28,64,864,441,423,70,660,770,508,83,319,80,197,950,486,154,189,764,524,118,630,898,31,84,801,995,280,996,938,840,375,405,865,724,921,98,767,311,330,324,490,273,917,98,232,976,965,475,337,604,474,357,842,821,242,683,555,631,70,870,897,921,229,406,566,321,960,759,17,522,450,404,259,244,170,972,986,278,902,934,797,92,598,136,560,669,749,970,302,388,247,96,802,801,598,675,628,24,62,246,342,453,121,170,61,539,204,802,581,470,536,236,370,6,539,125,23,3,978,236,640,215,526,338,970,416,151,341,383,606,734,907,660,580,562,359,422,197,926,595,737,504,469,967,824,530,302,948,866,67,898,112,168,353,928,370,882,866,711,399,28,994,628,661,125,364,594,734,430,839,577,535,118,185,406,985,895,530,976,760,90,244,766,9,429,408,434,54,628,289,596,311,345,855,780,508,552,398,747,238,28,966,494,211,37,482,815,17,153,322,222,140,588,32,366,378,525,325,762,393,591,106,291,581,463,301,102,294,552,210,809,516,953,376,797,204,451,480,632,504,919,252,855,654,243,317,996,148,238,606,107,97,327,492,841,893,486,256,967,66,181,783,411,574,274,505,798,294,526,292,105,592,831,153,926,664,204,121,314,448,288,947,394,332,900,263,445,559,165,917,320,406,118,63,67,376,844,326,73,448,699,123,596,452,697,994,168,52,118,510,887,271,601,270,857,401,827,247,632,370,269,953,538,444,34,669,55,488,217,64,482,891,245,367,478,448,505,449,967,152,547,731,377,36,64,864,509,258,366,457,127,969,209,397,196,519,209,197,317,711,955,974,47,182,84,531,124,495,583,3,43,803,846,240,900,335,722,801,950,12,458,850,205,460,456,800,589,836,548,149,843,712,146,345,783,145,936,229,148,590,92,461,880,915,651,103,393,696,597,804,147,904,747,513,797,382,427,413,271,908,694,371,339,223,219,45,395,835,594,520,239,999,446,7,163,683,791,475,979,488,541,853,857,335,234,176,765,940,554,635,281,229,909,705,901,26,832,511,329,764,692,903,239,967,496,692,511,277,196,445,453,195,673,846,757,743,283,665,747,884,694,602,19,764,161,690,626,107,595,247,82,377,441,821,470,72,508,575,435,236,352,215,711,885,465,386,362,571,156,965,759,160,92,729,257,280,350,204,985,935,496,707,131,708,463,951,327,131,829,684,955,648,674,338,518,547,709,772,577,875,54,688,461,329,977,261,141,975,643,756,203,376,67,385,828,598,468,570,764,398,539,458,743,693,174,622,556,690,161,604,250,849,203,255,287,451,329,318,827,952,796,504,916,861,43,302,172,57,469,484,355,744,71,477,566,97,887,123,102,568,625,122,680,409,295,89,669,337,781,548,384,697,929,457,334,167,277,577,911,416,548,129,601,891,422,535,731,102,732,162,998,84,631,276,597,72,881,603,460,44,534,593,732,439,485,650,635,974,786,366,357,27,712,526,200,380,775,64,5,769,132,946,105,363,98,894,97,355,440,691,701,237,540]", 752},
        };

        [Test]
        [TestCaseSource("testCasesStr")]
        public void Test_Generic(string numsStr, int expected)
        {
            var nums = ArrayHelper.ArrayFromString<int>(numsStr);
            
            var sol = new Solution();
            var res = sol.MinimizeArrayValue(nums);

            Assert.That(expected == res);
        }
    }
}