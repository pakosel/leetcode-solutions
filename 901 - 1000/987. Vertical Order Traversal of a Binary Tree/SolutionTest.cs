using System.Text;
using NUnit.Framework;
using System.Linq;
using System.Collections.Generic;
using Common;

namespace VerticalOrderTraversalOfBinaryTree
{
    [TestFixture]
    public class SolutionTest
    {
        private static readonly object[] testCasesStr =
        {
            new object[] {"[3,9,20,null,null,15,7]", "[[9],[3,15],[20],[7]]"},
            new object[] {"[1,2,3,4,5,6,7]", "[[4],[2],[1,5,6],[3],[7]]"},
            new object[] {"[1,2,3,4,6,5,7]", "[[4],[2],[1,5,6],[3],[7]]"},
            new object[] {"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]", "[[8],[4],[2,9,10,12],[1,5,6],[3,11,13,14],[7],[15]]"},
            new object[] {"[242,306,590,247,765,827,366,59,206,19,887,261,152,516,319,88,457,113,208,533]", "[[88],[59],[247,113,457,533],[306,19,206,261],[242,765,827,208],[590,152,516,887],[366],[319]]"},
            new object[] {"[328,908,194,51,464,557,148,24,610,156,848,211,810,461,746,792,999,212,812,984,956,540,561,481,255,331,669,68,949,499,530,67,965,730,858,411,242,126,330,418,99,745,851,45,688,667,420,776,447,268,695,408,467,591,983,985,694,202,214,880,93,870,793,575,87,534,508,201,713,398,545,881,529,895,855,913,46,251,434,725,863,786,794,963,690,850,539,302,378,191,576,178,799,168,176,775,258,399,44,753,397,982,7,957,558,57,899,487,934,315,155,79,379,228,141,811,377,818,515,261,366,919,273,113,627,62,831,773,869,104,808,190,14,243,244,348,789,554,606,289,703,536,958,800,787,619,287,795,177,737,961,914,424,158,650,160,50,854,224,138,347,551,839,553,199,278,862,607,227,612,286,702,938,807,532,936,772,727,230,275,437,823,763,372,922,821,990,600,712,510,53,655,468,105,525,955,520,229,205,560,94,757,878,465,392,294,10,852,584,749,526,803,589,838,480,973,796,380,373,234,631,458,989,241,630,187,764,272,29,441,943,944,628,353,664,925,317,334,195,164,608,658,252,790,988,135,884,849,313,479,109,89,503,91,374,422,477,293,918,137,566,603,972,538,207,760,121,853,489,267,395,582,743,977,43,657,893,832,16,894,311,213,586,898,383,360,407,597,482,921,283,400,645,671,236,470,297,335,280,833,781,474,41,323,994,85,834,262,484,562,279,498,726,218,146,59,780,841,404,98,507,147,419,868,620,215,736,402,144,80,952,277,416,338,363,34,751,579,103,947,448,598,114,381,820,301,987,82,806,624,967,704,13,836,613,501,723,27,290,569,78,217,246,276,429,857,186,729,512,886,926,668,233,937,163,590,864,206,879,343,157,609,890,691,40,618,971,509,450,535,835,9,314,182,700,292,639,413,235,131,486,559,284,939,673,48,549,904,39,912,52,128,802,184,941,502,299,174,490,389,455,71,369,825,643,552,681,621,327,364,527,271,542,568,675,929,663,69,959,172,412,580,774,705,167,991,950,788,394,974,771,906,940,405,166,452,678,370,153,263,365,685,161,216,661,391,665,720,659,136,896,709,18,887,361,162,710,574,492,76,240,646,200,547,179,716,980,77,145,73,860,124,485,390,679,225,826,110,513,718]", "[[422],[773],[575,98,137,293,477,538,582,597,691],[67,104,138,190,348,655,800,869],[792,87,201,534,725,775,881,9,34,40,131,147,207,323,400,402,470,482,502,507,509,566,603,618,657,704,743,760,788,853,868,894,918,921,977],[24,411,418,730,776,965,14,105,241,243,289,347,468,551,553,554,560,607,619,787,789,795,808,852,914,936,955],[51,212,481,984,999,79,258,302,398,399,508,529,713,753,786,863,895,913,957,963,13,43,76,80,85,121,144,174,182,213,215,216,262,267,271,277,283,292,297,299,311,314,335,381,389,394,419,450,452,486,489,498,501,535,559,569,579,620,645,671,729,751,825,832,833,836,893,898,904,906,939,947,971,972,974,994],[908,156,211,610,45,99,126,242,268,408,447,745,858,985,94,158,160,164,177,187,199,227,229,244,272,275,278,287,372,424,465,520,525,536,584,606,612,630,702,703,727,737,749,757,772,803,839,944,973],[328,464,557,68,255,331,540,812,956,44,46,57,178,191,228,251,261,378,379,397,487,545,558,690,794,811,850,855,982,16,27,39,48,59,71,77,78,82,103,128,172,217,218,225,236,240,263,276,280,284,301,338,360,370,383,391,395,405,413,416,448,455,474,484,490,512,542,547,552,562,568,586,590,598,613,621,639,643,646,661,668,673,678,700,709,720,723,726,736,771,781,820,834,835,886,912,929,940,952],[194,461,810,848,202,330,467,591,667,688,694,695,851,880,29,50,205,230,234,286,294,353,380,392,437,441,526,589,600,608,628,650,658,764,790,796,807,821,823,838,849,854,862,878,922,925,938,958,961],[148,499,561,669,949,7,113,141,168,315,366,377,434,539,576,799,818,899,919,934,18,41,52,69,73,110,114,124,136,145,146,153,162,166,179,184,200,206,233,235,246,279,290,327,343,363,364,365,369,407,412,429,549,580,624,659,663,665,675,681,685,705,716,718,780,802,806,826,841,857,864,887,926,937,987],[746,93,214,420,870,983,10,89,135,224,252,313,317,334,373,458,479,480,510,532,631,664,712,763,943,988,990],[530,62,155,176,273,515,627,157,161,163,167,186,361,390,404,485,513,527,574,609,710,774,860,879,896,941,959,967,980,991],[793,53,91,109,195,503,884,989],[831,492,679,890,950],[374]]"},
        };

        [Test]
        [TestCaseSource("testCasesStr")]
        public void Test_Generic(string treeStr, string expectedStr)
        {
            var root = TreeNodeHelper.BuildTree(treeStr);
            var expected = ArrayHelper.MatrixFromString<int>(expectedStr);

            var sol = new Solution();
            var res = sol.VerticalTraversal(root);

            CollectionAssert.AreEqual(expected, res);
        }
    }
}