using System.Text;
using NUnit.Framework;
using NUnit.Framework.Legacy;
using System.Linq;
using System.Collections.Generic;
using Common;

namespace OnesAndZeroes
{
    [TestFixture]
    public class SolutionTest
    {
        private static readonly object[] testCases =
        {
            new object[] {new string[] {"10","0","1"}, 1, 1, 2},
            new object[] {new string[] {"10","0001","111001","1","0"}, 5, 3, 4},
            new object[] {new string[] {"10","0","1","1","0000000"}, 10, 2, 4},
            new object[] {new string[] {"111","1000","1000","1000"}, 9, 3, 3},
            new object[] {new string[] {"11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000"}, 90, 66, 29},
            new object[] {new string[] {"11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","11","0","0","10","1","1","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","11","0","0","10","1","1","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","11","0","0","10","1","1","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","11","0","0","10","1","1","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000","11","11","0","0","10","1","1","0","11","1","0","111","11111000","0","11","000","1","1","0","00","1","101","001","000","0","00","0011","0","10000"}, 100, 100, 198},
        };

        [Test]
        [TestCaseSource("testCases")]
        public void Test_Generic(string[] strs, int m, int n, int expected)
        {
            var sol = new Solution();
            var res = sol.FindMaxForm(strs, m, n);

            Assert.That(expected == res);
        }

        [Test]
        [TestCaseSource("testCases")]
        public void Test_Dp(string[] strs, int m, int n, int expected)
        {
            var sol = new Solution_DP();
            var res = sol.FindMaxForm(strs, m, n);

            Assert.That(expected == res);
        }
    }
}